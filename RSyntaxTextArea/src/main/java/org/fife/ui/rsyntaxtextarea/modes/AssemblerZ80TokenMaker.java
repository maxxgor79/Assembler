/* The following code was generated by JFlex 1.4.1 on 3/16/24, 2:45 AM */

/*
 * 26/02/2024
 *
 * AssemblerZ80TokenMaker.java - An object that can take a chunk of text and
 * return a linked list of tokens representing Z80 assembler.
 * 
 * This library is distributed under a modified BSD license.  See the included
 * LICENSE file for details.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * This class takes plain text and returns tokens representing Z80
 * assembler.<p>
 *
 * This implementation was created using
 * <a href="https://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>), so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated <code>AssemblerZ80TokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell & Maxim Gorin
 * @version 0.2
 *
 */

public class AssemblerZ80TokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\21\1\20\1\0\1\21\23\0\1\55\1\25\1\15\1\3"+
    "\1\3\1\24\1\25\1\16\2\0\1\23\1\23\1\14\1\23\1\51"+
    "\1\23\1\6\1\11\6\12\1\27\1\2\1\22\1\17\1\25\1\25"+
    "\1\25\1\52\1\0\1\4\1\10\1\32\1\35\1\36\1\37\1\13"+
    "\1\5\1\30\1\54\1\1\1\33\1\46\1\31\1\47\1\44\1\50"+
    "\1\45\1\40\1\43\1\34\1\41\1\42\1\7\1\53\1\26\1\14"+
    "\1\0\1\14\1\25\1\1\1\0\1\4\1\10\1\32\1\35\1\36"+
    "\1\37\1\13\1\5\1\30\1\54\1\1\1\33\1\46\1\31\1\47"+
    "\1\44\1\50\1\45\1\40\1\43\1\34\1\41\1\42\1\7\1\53"+
    "\1\26\1\0\1\25\1\0\1\25\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\2\1\1\2\3\1\2\1\1\1\3"+
    "\2\2\1\4\1\5\1\6\1\7\1\10\1\11\1\1"+
    "\1\3\1\1\5\3\2\1\1\3\4\1\1\12\1\1"+
    "\1\13\1\1\2\2\2\1\1\3\1\1\1\3\1\1"+
    "\1\2\2\1\1\2\1\14\1\15\1\1\1\3\3\16"+
    "\4\1\2\16\1\1\2\12\1\3\1\12\1\1\1\16"+
    "\12\1\1\16\1\1\1\16\3\1\1\16\11\0\3\16"+
    "\1\3\1\2\1\13\2\16\2\1\1\13\1\1\1\2"+
    "\3\1\3\16\1\1\1\16\3\0\2\12\13\0\11\1"+
    "\1\13\2\0\1\13\5\0\1\16\1\0\1\16\5\1"+
    "\1\13\2\1\12\0\5\1\5\0\1\13\7\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[190];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2"+
    "\0\134\0\u02e0\0\134\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6"+
    "\0\u03f4\0\u0422\0\u0450\0\u047e\0\u04ac\0\u04da\0\u0508\0\u0536"+
    "\0\u0564\0\u0592\0\u05c0\0\u05ee\0\u05ee\0\u0450\0\212\0\346"+
    "\0\u061c\0\u064a\0\u0678\0\u06a6\0\212\0\u06d4\0\u0702\0\u0730"+
    "\0\u075e\0\u0450\0\134\0\134\0\u078c\0\u07ba\0\u07e8\0\u0816"+
    "\0\212\0\u0844\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958"+
    "\0\u0450\0\u0986\0\u09b4\0\212\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c"+
    "\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc"+
    "\0\u0c0a\0\u0c38\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c"+
    "\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc"+
    "\0\u0eea\0\u0f18\0\u0450\0\u05ee\0\u06d4\0\212\0\u0730\0\u0f46"+
    "\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u10b6"+
    "\0\u10e4\0\u1112\0\u1140\0\u116e\0\u119c\0\u11ca\0\u11f8\0\u1226"+
    "\0\134\0\u1254\0\u1282\0\u12b0\0\u12de\0\u130c\0\u133a\0\u1368"+
    "\0\u1396\0\u13c4\0\u13f2\0\u1420\0\u144e\0\u147c\0\u14aa\0\u14d8"+
    "\0\u0986\0\u1506\0\u1534\0\u1562\0\u1590\0\u15be\0\134\0\u15ec"+
    "\0\u161a\0\u1648\0\u1676\0\u16a4\0\u16d2\0\u1700\0\u172e\0\134"+
    "\0\u175c\0\u178a\0\u17b8\0\u17e6\0\u1814\0\u1842\0\u1870\0\u189e"+
    "\0\u18cc\0\u18fa\0\u1928\0\u1956\0\u1984\0\u1254\0\u19b2\0\u19e0"+
    "\0\u1a0e\0\u1a3c\0\u1a6a\0\u1a98\0\u1ac6\0\u1af4\0\u1b22\0\u1b50"+
    "\0\u1b7e\0\u1bac\0\u1bda\0\u1c08\0\u1c36\0\u1c64\0\u1c92\0\u1cc0"+
    "\0\u1cee\0\u1d1c\0\u1d4a\0\u1d78\0\u1da6\0\u1dd4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[190];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\4\1\3\1\16\1\17\1\20"+
    "\1\21\1\22\1\3\3\23\1\24\1\5\1\25\1\26"+
    "\1\27\1\30\1\4\1\31\1\32\1\33\1\34\3\4"+
    "\1\35\1\36\1\37\1\40\1\4\1\41\1\3\1\4"+
    "\1\42\1\22\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\4\1\3\1\16"+
    "\1\17\1\20\1\21\1\22\1\3\1\23\1\43\1\23"+
    "\1\24\1\5\1\25\1\26\1\27\1\30\1\4\1\31"+
    "\1\32\1\33\1\34\3\4\1\35\1\36\1\37\1\40"+
    "\1\4\1\41\1\3\1\4\1\42\1\22\56\0\1\44"+
    "\2\4\1\44\10\4\1\0\3\44\2\0\1\45\2\0"+
    "\1\44\23\4\1\0\1\44\2\4\1\0\1\44\1\4"+
    "\1\5\1\44\1\46\1\47\1\5\1\4\1\46\2\5"+
    "\1\4\1\0\3\44\2\0\1\45\2\0\1\44\1\4"+
    "\1\5\2\4\1\46\2\4\3\46\11\4\1\0\1\44"+
    "\2\4\3\0\1\50\1\0\1\50\1\0\1\50\1\0"+
    "\3\50\14\0\1\50\2\0\1\50\2\0\3\50\16\0"+
    "\1\44\1\4\1\46\1\44\1\46\1\47\1\46\1\4"+
    "\3\46\1\4\1\0\3\44\2\0\1\45\2\0\1\44"+
    "\1\4\1\46\1\4\1\51\1\46\2\4\1\52\1\46"+
    "\1\53\11\4\1\0\1\44\2\4\1\0\1\44\2\4"+
    "\1\44\1\54\7\4\1\0\3\44\2\0\1\45\2\0"+
    "\1\44\5\4\1\55\15\4\1\0\1\44\2\4\1\0"+
    "\1\44\1\4\1\5\1\44\1\46\1\47\1\14\1\56"+
    "\1\57\1\14\1\15\1\47\1\0\3\44\2\0\1\45"+
    "\2\0\1\44\1\4\1\5\2\4\1\46\2\4\3\46"+
    "\11\4\1\0\1\44\2\4\1\0\1\44\2\4\1\44"+
    "\10\4\1\0\3\44\2\0\1\45\2\0\1\44\21\4"+
    "\1\60\1\4\1\0\1\44\2\4\1\0\1\44\1\4"+
    "\1\46\1\44\1\46\1\47\1\46\1\4\3\46\1\4"+
    "\1\0\3\44\2\0\1\45\2\0\1\44\1\4\1\46"+
    "\1\61\1\4\1\33\2\4\3\46\11\4\1\0\1\44"+
    "\2\4\1\0\1\44\1\4\1\5\1\44\1\46\1\47"+
    "\1\14\1\4\1\62\1\14\1\15\1\47\1\0\3\44"+
    "\2\0\1\45\2\0\1\44\1\4\1\5\2\4\1\46"+
    "\2\4\3\46\11\4\1\0\1\44\2\4\1\0\1\44"+
    "\1\4\1\5\1\44\1\46\1\47\1\15\1\4\1\46"+
    "\2\15\1\47\1\0\3\44\2\0\1\45\2\0\1\44"+
    "\1\4\1\5\2\4\1\46\2\4\3\46\11\4\1\0"+
    "\1\44\2\4\1\0\15\16\1\63\40\16\16\17\1\64"+
    "\37\17\20\20\1\0\35\20\21\0\1\22\33\0\1\22"+
    "\1\44\2\4\1\44\10\4\1\0\3\44\2\0\1\45"+
    "\2\0\1\44\1\4\1\65\21\4\1\0\1\44\2\4"+
    "\1\0\1\44\2\4\1\44\3\4\1\66\4\4\1\0"+
    "\3\44\2\0\1\45\2\0\1\44\3\4\1\67\14\4"+
    "\1\70\2\4\1\0\1\44\1\66\1\4\1\0\1\44"+
    "\2\4\1\44\10\4\1\0\3\44\2\0\1\45\2\0"+
    "\1\44\1\71\3\4\1\71\3\4\1\72\10\4\1\73"+
    "\1\4\1\0\1\44\2\4\1\0\1\44\1\4\1\46"+
    "\1\44\1\74\1\47\1\46\1\4\3\46\1\4\1\0"+
    "\3\44\2\0\1\45\2\0\1\44\1\4\1\46\2\4"+
    "\1\75\2\4\3\46\4\4\1\76\4\4\1\0\1\44"+
    "\2\4\1\0\1\44\2\4\1\44\10\4\1\0\3\44"+
    "\2\0\1\45\2\0\1\44\7\4\1\77\13\4\1\0"+
    "\1\44\2\4\1\0\1\44\1\4\1\46\1\44\1\100"+
    "\1\47\1\46\1\4\1\101\2\46\1\4\1\0\3\44"+
    "\2\0\1\45\2\0\1\44\1\4\1\46\1\71\1\4"+
    "\1\46\2\4\1\102\1\103\1\46\2\4\1\104\6\4"+
    "\1\0\1\44\1\4\1\105\1\0\1\44\1\4\1\46"+
    "\1\44\1\46\1\47\1\46\1\106\3\46\1\4\1\0"+
    "\3\44\2\0\1\45\2\0\1\44\1\4\1\46\1\71"+
    "\1\107\1\110\2\4\3\46\10\4\1\111\1\0\1\44"+
    "\2\4\1\0\1\44\1\4\1\46\1\44\1\46\1\47"+
    "\1\46\1\4\3\46\1\4\1\0\3\44\2\0\1\45"+
    "\2\0\1\44\1\4\1\46\2\4\1\46\2\4\3\46"+
    "\11\4\1\0\1\44\2\4\1\0\1\44\2\4\1\44"+
    "\1\112\7\4\1\0\3\44\2\0\1\45\2\0\1\44"+
    "\4\4\1\113\1\114\1\115\1\116\1\61\5\4\1\55"+
    "\1\114\3\4\1\0\1\44\2\4\1\0\1\44\2\4"+
    "\1\44\10\4\1\0\3\44\2\0\1\45\2\0\1\44"+
    "\6\4\1\117\10\4\1\120\1\4\1\73\1\4\1\0"+
    "\1\44\2\4\1\0\1\44\2\4\1\44\10\4\1\0"+
    "\3\44\2\0\1\45\2\0\1\44\5\4\1\121\2\4"+
    "\1\122\1\4\1\61\4\4\1\123\3\4\1\0\1\44"+
    "\2\4\1\0\1\44\2\4\1\44\10\4\1\0\3\44"+
    "\2\0\1\45\2\0\1\44\10\4\1\124\12\4\1\0"+
    "\1\44\2\4\1\0\1\44\2\4\1\44\10\4\1\0"+
    "\3\44\2\0\1\45\2\0\1\44\6\4\1\125\6\4"+
    "\1\126\1\4\1\127\3\4\1\0\1\44\2\4\27\0"+
    "\1\130\1\0\1\131\4\0\1\132\1\133\1\0\1\134"+
    "\3\0\1\135\1\136\1\137\1\140\6\0\1\44\2\4"+
    "\1\44\10\4\1\0\3\44\2\0\1\45\2\0\1\44"+
    "\16\4\1\141\1\142\3\4\1\0\1\44\2\4\2\0"+
    "\2\43\1\0\10\43\12\0\23\43\2\0\2\43\1\0"+
    "\14\44\1\0\3\44\2\0\1\44\2\0\24\44\1\0"+
    "\3\44\1\0\1\44\2\4\1\44\10\4\1\0\3\44"+
    "\2\0\1\45\2\0\1\44\7\4\1\71\13\4\1\0"+
    "\1\44\2\4\1\0\1\44\1\4\1\46\1\44\1\46"+
    "\1\47\1\46\1\4\3\46\1\4\1\0\3\44\2\0"+
    "\1\45\2\0\1\44\1\4\1\46\2\4\1\143\2\4"+
    "\1\143\2\46\11\4\1\0\1\44\2\4\1\0\1\44"+
    "\1\4\1\46\1\44\1\46\1\47\1\46\1\4\3\46"+
    "\1\4\1\0\1\44\1\144\1\44\2\0\1\45\2\0"+
    "\1\44\1\4\1\46\2\4\1\46\2\4\3\46\11\4"+
    "\1\0\1\44\2\4\1\0\1\44\2\4\1\44\10\4"+
    "\1\0\3\44\2\0\1\45\2\0\1\44\5\4\1\61"+
    "\15\4\1\0\1\44\2\4\1\0\1\44\1\4\1\145"+
    "\1\44\1\145\1\4\1\145\1\4\3\145\1\4\1\0"+
    "\3\44\2\0\1\45\2\0\1\44\1\4\1\145\2\4"+
    "\1\145\2\4\3\145\11\4\1\0\1\44\2\4\1\0"+
    "\1\44\1\4\1\46\1\44\1\46\1\47\1\57\1\4"+
    "\1\46\1\57\1\46\1\4\1\0\3\44\2\0\1\45"+
    "\2\0\1\44\1\4\1\46\2\4\1\46\2\4\3\46"+
    "\11\4\1\0\1\44\2\4\1\0\1\44\2\4\1\44"+
    "\10\4\1\0\3\44\2\0\1\45\2\0\1\44\17\4"+
    "\1\71\3\4\1\0\1\44\2\4\1\0\1\44\2\4"+
    "\1\44\10\4\1\0\3\44\2\0\1\45\2\0\1\44"+
    "\15\4\1\71\5\4\1\0\1\44\2\4\1\0\1\44"+
    "\2\4\1\44\2\4\1\146\5\4\1\0\3\44\2\0"+
    "\1\45\2\0\1\44\23\4\1\0\1\44\2\4\1\0"+
    "\1\44\2\4\1\44\1\4\1\55\6\4\1\0\3\44"+
    "\2\0\1\45\2\0\1\44\5\4\1\55\15\4\1\0"+
    "\1\44\2\4\1\0\1\44\2\4\1\44\10\4\1\0"+
    "\3\44\2\0\1\45\2\0\1\44\2\4\1\147\1\4"+
    "\1\150\2\4\1\147\13\4\1\0\1\44\2\4\1\0"+
    "\1\44\2\4\1\44\1\151\6\4\1\104\1\0\3\44"+
    "\2\0\1\45\2\0\1\44\23\4\1\0\1\44\2\4"+
    "\1\0\1\44\2\4\1\44\7\4\1\71\1\0\3\44"+
    "\2\0\1\45\2\0\1\44\23\4\1\0\1\44\2\4"+
    "\1\0\1\44\2\4\1\44\10\4\1\0\3\44\2\0"+
    "\1\45\2\0\1\44\16\4\1\71\4\4\1\0\1\44"+
    "\2\4\1\0\1\44\1\4\1\46\1\44\1\46\1\47"+
    "\1\46\1\4\3\46\1\4\1\0\3\44\2\0\1\45"+
    "\2\0\1\44\1\4\1\46\2\4\1\46\1\152\1\4"+
    "\3\46\11\4\1\0\1\44\2\4\1\0\1\44\1\4"+
    "\1\46\1\44\1\46\1\47\1\46\1\4\3\46\1\4"+
    "\1\0\3\44\2\0\1\45\2\0\1\44\1\4\1\46"+
    "\2\4\1\46\2\4\2\46\1\143\11\4\1\0\1\44"+
    "\2\4\1\0\1\44\2\4\1\44\10\4\1\0\3\44"+
    "\2\0\1\45\2\0\1\44\2\4\1\147\2\4\1\71"+
    "\1\4\1\147\13\4\1\0\1\44\2\4\1\0\1\44"+
    "\2\4\1\44\10\4\1\0\3\44\2\0\1\45\2\0"+
    "\1\44\2\4\1\147\4\4\1\147\13\4\1\0\1\44"+
    "\2\4\1\0\1\44\1\4\1\46\1\44\1\143\1\47"+
    "\1\46\1\4\3\46\1\4\1\0\3\44\2\0\1\45"+
    "\2\0\1\44\1\4\1\46\2\4\1\46\2\4\3\46"+
    "\11\4\1\0\1\44\2\4\1\0\1\44\1\4\1\46"+
    "\1\44\1\46\1\47\1\46\1\4\3\46\1\4\1\0"+
    "\3\44\2\0\1\45\2\0\1\44\1\4\1\46\2\4"+
    "\1\46\2\4\3\46\2\4\1\104\6\4\1\0\1\44"+
    "\2\4\1\0\1\44\1\4\1\46\1\44\1\46\1\47"+
    "\1\46\1\4\3\46\1\4\1\0\3\44\2\0\1\45"+
    "\2\0\1\44\1\4\1\46\2\4\1\143\2\4\2\46"+
    "\1\153\11\4\1\0\1\44\2\4\1\0\1\44\2\4"+
    "\1\44\10\4\1\0\3\44\2\0\1\45\2\0\1\44"+
    "\3\4\1\154\17\4\1\0\1\44\2\4\1\0\1\44"+
    "\2\4\1\44\3\4\1\71\4\4\1\0\3\44\2\0"+
    "\1\45\2\0\1\44\23\4\1\0\1\44\2\4\1\0"+
    "\1\44\2\4\1\44\10\4\1\0\3\44\2\0\1\45"+
    "\2\0\1\44\7\4\1\146\13\4\1\0\1\44\2\4"+
    "\1\0\1\44\1\4\1\46\1\44\1\46\1\155\1\46"+
    "\1\4\3\46\1\4\1\0\3\44\2\0\1\45\2\0"+
    "\1\44\1\4\1\46\2\4\1\46\2\4\3\46\11\4"+
    "\1\0\1\44\2\4\1\0\1\44\2\4\1\44\10\4"+
    "\1\0\3\44\2\0\1\45\2\0\1\44\6\4\1\146"+
    "\14\4\1\0\1\44\2\4\1\0\1\44\2\4\1\44"+
    "\10\4\1\0\3\44\2\0\1\45\2\0\1\44\13\4"+
    "\1\156\7\4\1\0\1\44\2\4\1\0\1\44\2\4"+
    "\1\44\10\4\1\0\3\44\2\0\1\45\2\0\1\44"+
    "\11\4\1\71\11\4\1\0\1\44\2\4\1\0\1\44"+
    "\2\4\1\44\1\71\7\4\1\0\3\44\2\0\1\45"+
    "\2\0\1\44\5\4\1\71\15\4\1\0\1\44\2\4"+
    "\1\0\1\44\2\4\1\44\4\4\1\71\3\4\1\0"+
    "\3\44\2\0\1\45\2\0\1\44\23\4\1\0\1\44"+
    "\2\4\1\0\1\44\2\4\1\44\10\4\1\0\3\44"+
    "\2\0\1\45\2\0\1\44\4\4\1\71\16\4\1\0"+
    "\1\44\2\4\1\0\1\44\2\4\1\44\10\4\1\0"+
    "\3\44\2\0\1\45\2\0\1\44\12\4\1\157\10\4"+
    "\1\0\1\44\2\4\1\0\1\44\2\4\1\44\10\4"+
    "\1\0\3\44\2\0\1\45\2\0\1\44\2\4\1\160"+
    "\20\4\1\0\1\44\2\4\1\0\1\44\2\4\1\44"+
    "\1\71\7\4\1\0\3\44\2\0\1\45\2\0\1\44"+
    "\4\4\1\161\16\4\1\0\1\44\2\4\1\0\1\44"+
    "\2\4\1\44\10\4\1\0\3\44\2\0\1\45\2\0"+
    "\1\44\12\4\1\162\2\4\1\163\5\4\1\0\1\44"+
    "\2\4\1\0\1\44\2\4\1\44\1\71\7\4\1\0"+
    "\3\44\2\0\1\45\2\0\1\44\4\4\1\161\2\4"+
    "\1\71\13\4\1\0\1\44\2\4\1\0\1\44\2\4"+
    "\1\44\10\4\1\0\3\44\2\0\1\45\2\0\1\44"+
    "\12\4\1\164\10\4\1\0\1\44\2\4\1\0\1\44"+
    "\2\4\1\44\10\4\1\0\3\44\2\0\1\45\2\0"+
    "\1\44\15\4\1\165\5\4\1\0\1\44\2\4\1\0"+
    "\1\44\2\4\1\44\10\4\1\0\3\44\2\0\1\45"+
    "\2\0\1\44\2\4\1\60\4\4\1\60\13\4\1\0"+
    "\1\44\2\4\1\0\1\44\2\4\1\44\7\4\1\146"+
    "\1\0\3\44\2\0\1\45\2\0\1\44\23\4\1\0"+
    "\1\44\2\4\30\0\1\166\57\0\1\167\14\0\1\170"+
    "\17\0\1\171\24\0\1\172\1\173\3\0\1\171\44\0"+
    "\1\174\1\175\15\0\1\176\11\0\1\177\116\0\1\200"+
    "\46\0\1\201\55\0\1\202\64\0\1\203\10\0\1\44"+
    "\2\4\1\44\10\4\1\0\3\44\2\0\1\45\2\0"+
    "\1\44\23\4\1\0\1\44\2\4\1\204\1\44\2\4"+
    "\1\44\10\4\1\0\3\44\2\0\1\45\2\0\1\44"+
    "\23\4\1\0\1\44\2\4\1\205\1\44\2\4\1\44"+
    "\10\4\1\0\3\44\2\0\1\45\2\0\1\44\5\4"+
    "\1\206\15\4\1\0\1\44\2\4\1\0\1\44\2\4"+
    "\1\44\7\4\1\207\1\0\3\44\2\0\1\45\2\0"+
    "\1\44\23\4\1\0\1\44\2\4\1\0\1\44\2\4"+
    "\1\44\10\4\1\0\3\44\2\0\1\45\2\0\1\44"+
    "\5\4\1\141\15\4\1\0\1\44\2\4\1\0\1\44"+
    "\1\4\1\46\1\44\1\46\1\47\1\46\1\4\1\101"+
    "\2\46\1\4\1\0\3\44\2\0\1\45\2\0\1\44"+
    "\1\4\1\46\1\210\1\4\1\46\2\4\1\211\2\46"+
    "\2\4\1\104\2\4\1\212\3\4\1\0\1\44\2\4"+
    "\1\0\1\44\2\4\1\44\10\4\1\0\3\44\2\0"+
    "\1\45\2\0\1\44\1\71\22\4\1\0\1\44\2\4"+
    "\1\0\1\44\2\4\1\44\10\4\1\0\3\44\2\0"+
    "\1\45\2\0\1\44\21\4\1\146\1\4\1\0\1\44"+
    "\2\4\1\0\1\44\2\4\1\44\10\4\1\0\3\44"+
    "\2\0\1\45\2\0\1\44\10\4\1\213\12\4\1\0"+
    "\1\44\2\4\1\0\1\44\2\4\1\44\1\4\1\71"+
    "\6\4\1\0\3\44\2\0\1\45\2\0\1\44\23\4"+
    "\1\0\1\44\2\4\1\0\1\44\2\4\1\44\10\4"+
    "\1\0\3\44\2\0\1\45\2\0\1\44\3\4\1\214"+
    "\17\4\1\0\1\44\2\4\1\0\1\44\2\4\1\44"+
    "\1\71\7\4\1\0\3\44\2\0\1\45\2\0\1\44"+
    "\23\4\1\0\1\44\2\4\1\0\1\44\2\4\1\44"+
    "\10\4\1\0\3\44\2\0\1\45\2\0\1\44\21\4"+
    "\1\215\1\4\1\0\1\44\2\4\1\0\1\44\2\4"+
    "\1\44\10\4\1\0\3\44\2\0\1\45\2\0\1\44"+
    "\2\4\2\71\17\4\1\0\1\44\2\4\1\204\1\44"+
    "\2\4\1\44\10\4\1\0\3\44\2\0\1\45\2\0"+
    "\1\44\12\4\1\216\10\4\1\0\1\44\2\4\1\0"+
    "\1\44\2\4\1\44\10\4\1\0\3\44\2\0\1\45"+
    "\2\0\1\44\2\4\1\71\4\4\1\71\13\4\1\0"+
    "\1\44\2\4\7\0\1\217\101\0\1\220\27\0\1\221"+
    "\6\0\1\171\104\0\1\171\52\0\1\222\53\0\1\217"+
    "\25\0\1\223\104\0\1\217\62\0\1\224\44\0\1\225"+
    "\65\0\1\226\55\0\1\227\30\0\1\217\70\0\1\230"+
    "\2\0\1\231\1\230\11\0\1\232\1\0\1\230\35\0"+
    "\1\230\2\0\1\231\1\230\23\0\1\44\2\4\1\44"+
    "\10\4\1\0\3\44\2\0\1\45\2\0\1\44\6\4"+
    "\1\233\14\4\1\0\1\44\2\4\1\0\1\44\2\4"+
    "\1\44\10\4\1\0\3\44\2\0\1\45\2\0\1\44"+
    "\10\4\1\104\12\4\1\0\1\44\2\4\1\0\1\44"+
    "\2\4\1\44\10\4\1\0\3\44\2\0\1\45\2\0"+
    "\1\44\3\4\1\234\17\4\1\0\1\44\2\4\1\0"+
    "\1\44\2\4\1\44\10\4\1\0\3\44\2\0\1\45"+
    "\2\0\1\44\10\4\1\235\12\4\1\0\1\44\2\4"+
    "\1\0\1\44\2\4\1\44\10\4\1\0\3\44\2\0"+
    "\1\45\2\0\1\44\14\4\1\236\1\237\5\4\1\0"+
    "\1\44\2\4\1\0\1\44\2\4\1\44\10\4\1\0"+
    "\3\44\2\0\1\45\2\0\1\44\15\4\1\240\5\4"+
    "\1\0\1\44\2\4\1\0\1\44\2\4\1\44\10\4"+
    "\1\0\3\44\2\0\1\45\2\0\1\44\6\4\1\241"+
    "\14\4\1\0\1\44\2\4\1\0\1\44\2\4\1\44"+
    "\1\242\7\4\1\0\3\44\2\0\1\45\2\0\1\44"+
    "\23\4\1\0\1\44\2\4\34\0\1\243\35\0\1\244"+
    "\52\0\1\171\17\0\1\245\4\0\1\246\4\0\1\171"+
    "\2\0\1\247\57\0\1\250\44\0\1\251\50\0\1\252"+
    "\73\0\1\253\46\0\1\254\43\0\1\230\3\0\1\230"+
    "\61\0\1\230\10\0\1\230\6\0\1\44\2\4\1\44"+
    "\10\4\1\0\3\44\2\0\1\45\2\0\1\44\7\4"+
    "\1\234\13\4\1\0\1\44\2\4\1\0\1\44\2\4"+
    "\1\44\10\4\1\0\3\44\2\0\1\45\2\0\1\44"+
    "\10\4\1\146\12\4\1\0\1\44\2\4\1\0\1\44"+
    "\2\4\1\44\10\4\1\0\3\44\2\0\1\45\2\0"+
    "\1\44\12\4\1\104\10\4\1\0\1\44\2\4\1\0"+
    "\1\44\2\4\1\44\1\255\7\4\1\0\3\44\2\0"+
    "\1\45\2\0\1\44\23\4\1\0\1\44\2\4\1\0"+
    "\1\44\2\4\1\44\1\256\7\4\1\0\3\44\2\0"+
    "\1\45\2\0\1\44\1\257\22\4\1\0\1\44\2\4"+
    "\1\0\1\44\2\4\1\44\10\4\1\0\3\44\2\0"+
    "\1\45\2\0\1\44\5\4\1\260\15\4\1\0\1\44"+
    "\2\4\1\0\1\44\2\4\1\44\10\4\1\0\3\44"+
    "\2\0\1\45\2\0\1\44\17\4\1\261\3\4\1\0"+
    "\1\44\2\4\1\0\1\44\2\4\1\44\7\4\1\234"+
    "\1\0\3\44\2\0\1\45\2\0\1\44\23\4\1\0"+
    "\1\44\2\4\35\0\1\262\57\0\1\171\50\0\1\263"+
    "\62\0\1\264\71\0\1\217\45\0\1\265\1\266\55\0"+
    "\1\267\46\0\1\270\25\0\1\271\51\0\1\44\2\4"+
    "\1\44\10\4\1\0\3\44\2\0\1\45\2\0\1\44"+
    "\13\4\1\146\7\4\1\0\1\44\2\4\1\0\1\44"+
    "\2\4\1\44\10\4\1\0\3\44\2\0\1\45\2\0"+
    "\1\44\16\4\1\146\4\4\1\0\1\44\2\4\1\0"+
    "\1\44\2\4\1\44\3\4\1\146\4\4\1\0\3\44"+
    "\2\0\1\45\2\0\1\44\23\4\1\0\1\44\2\4"+
    "\1\0\1\44\2\4\1\44\10\4\1\0\3\44\2\0"+
    "\1\45\2\0\1\44\3\4\1\146\17\4\1\0\1\44"+
    "\2\4\1\0\1\44\2\4\1\44\10\4\1\0\3\44"+
    "\2\0\1\45\2\0\1\44\4\4\1\207\16\4\1\0"+
    "\1\44\2\4\36\0\1\263\56\0\1\217\57\0\1\171"+
    "\21\0\1\272\55\0\1\273\21\0\1\274\62\0\1\275"+
    "\67\0\1\276\23\0\1\263\103\0\1\217\60\0\1\217"+
    "\20\0\1\217\77\0\1\217\56\0\1\244\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7682];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\15\1\1\11\1\1\1\11\37\1\2\11"+
    "\43\1\11\0\25\1\3\0\1\11\1\1\13\0\11\1"+
    "\1\11\2\0\1\1\5\0\1\11\1\0\11\1\12\0"+
    "\5\1\5\0\1\1\7\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[190];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  We must have this here as JFLex does not generate a
	 * no parameter constructor.
	 */
	public AssemblerZ80TokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { ";", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *                    <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AssemblerZ80TokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AssemblerZ80TokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 192) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }

  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 14: 
          { addToken(Token.RESERVED_WORD);
          }
        case 15: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 16: break;
        case 12: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 17: break;
        case 10: 
          { addToken(Token.FUNCTION);
          }
        case 18: break;
        case 6: 
          { addToken(Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 19: break;
        case 8: 
          { addToken(Token.WHITESPACE);
          }
        case 20: break;
        case 3: 
          { addToken(Token.VARIABLE);
          }
        case 21: break;
        case 11: 
          { addToken(Token.PREPROCESSOR);
          }
        case 22: break;
        case 5: 
          { addToken(Token.ERROR_CHAR); /*addNullToken(); return firstToken;*/
          }
        case 23: break;
        case 9: 
          { addToken(Token.OPERATOR);
          }
        case 24: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 25: break;
        case 13: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 26: break;
        case 4: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 27: break;
        case 7: 
          { addNullToken(); return firstToken;
          }
        case 28: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 191: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
