/* The following code was generated by JFlex 1.4.1 on 2/26/24, 1:36 AM */

/*
 * This library is distributed under a modified BSD license.  See the included
 * LICENSE file for details.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * This class takes plain text and returns tokens representing 6502
 * assembler.<p>
 *
 * This implementation was created using
 * <a href="https://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>), so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated <code>AssemblerZ80TokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.2
 *
 */

public class AssemblerZ80TokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\56\1\20\1\0\1\21\23\0\1\56\1\25\1\15\1\55"+
    "\1\3\1\24\1\25\1\16\2\0\1\23\1\23\1\14\1\23\1\47"+
    "\1\23\1\6\1\11\6\12\2\2\1\22\1\17\1\25\1\25\1\25"+
    "\1\50\1\54\1\4\1\10\1\30\1\33\1\34\1\35\1\13\1\5"+
    "\1\26\1\53\1\1\1\31\1\45\1\27\1\46\1\42\1\51\1\44"+
    "\1\36\1\41\1\32\1\37\1\40\1\7\1\52\1\43\1\14\1\0"+
    "\1\14\1\25\1\1\1\0\1\4\1\10\1\30\1\33\1\34\1\60"+
    "\1\13\1\57\1\26\1\53\1\1\1\31\1\45\1\27\1\46\1\42"+
    "\1\51\1\44\1\36\1\41\1\32\1\37\1\61\1\7\1\52\1\43"+
    "\1\0\1\25\1\0\1\25\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\1\2\3\1\2\1\1\1\3"+
    "\2\2\1\4\1\5\1\6\1\7\1\10\1\11\1\3"+
    "\1\1\5\3\1\1\2\12\1\1\1\12\5\1\1\11"+
    "\1\13\1\14\1\13\1\1\1\15\1\1\2\2\2\1"+
    "\1\3\1\1\1\3\1\1\1\2\2\1\1\2\1\16"+
    "\1\17\1\3\2\12\4\1\2\12\1\1\1\20\1\3"+
    "\1\20\1\1\1\12\11\1\2\12\1\1\1\12\3\1"+
    "\10\0\3\15\1\20\1\12\1\3\1\2\2\12\2\1"+
    "\1\15\1\1\1\2\3\1\3\12\1\1\1\12\3\3"+
    "\1\20\7\3\1\15\5\1\1\15\4\1\2\3\1\15"+
    "\5\3\1\15\5\1\1\15\2\1\12\3\5\1\3\3"+
    "\1\15\2\3\1\15\7\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[187];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee"+
    "\0\226\0\226\0\u0320\0\226\0\u0352\0\u0384\0\u03b6\0\u03e8"+
    "\0\u041a\0\u044c\0\u047e\0\u04b0\0\u04e2\0\310\0\u0514\0\u0546"+
    "\0\u0578\0\u05aa\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4\0\226"+
    "\0\226\0\u06d6\0\u06d6\0\u047e\0\310\0\u012c\0\u0708\0\u073a"+
    "\0\u076c\0\u079e\0\310\0\u07d0\0\u0802\0\u0834\0\u0866\0\u047e"+
    "\0\226\0\226\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992"+
    "\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u047e\0\u0a8c\0\310\0\u0abe"+
    "\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e"+
    "\0\u0c80\0\u0cb2\0\u0960\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac"+
    "\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c"+
    "\0\u0f6e\0\u060e\0\u0fa0\0\u0fd2\0\u1004\0\u047e\0\u06d6\0\u07d0"+
    "\0\u0834\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u1162"+
    "\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c\0\u128e\0\u12c0\0\u0e10"+
    "\0\u12f2\0\u1324\0\u0e10\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e"+
    "\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c\0\u15ae"+
    "\0\310\0\u15e0\0\u1612\0\u1644\0\u1676\0\u16a8\0\u16da\0\u170c"+
    "\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806\0\226\0\u1838\0\u186a"+
    "\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964\0\u1996\0\u19c8\0\u19fa"+
    "\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4\0\u1b26\0\u1b58\0\u1b8a"+
    "\0\u1bbc\0\u1bee\0\u1c20\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8\0\u1d1a"+
    "\0\u0e10\0\u1d4c\0\u1d7e\0\u1db0\0\u1de2\0\u1e14\0\u1e46\0\u1e78"+
    "\0\u1eaa\0\u1edc\0\u1f0e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[187];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\5\1\4\1\17\1\20\1\21"+
    "\1\22\1\23\1\4\3\24\1\25\1\26\1\27\1\30"+
    "\1\5\1\31\1\32\1\33\1\34\3\5\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\4\2\5\1\43\1\44"+
    "\1\45\1\23\1\11\1\33\1\5\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\5\1\4\1\17\1\20\1\21\1\22\1\23\1\4"+
    "\1\24\1\46\1\24\1\25\1\26\1\27\1\30\1\5"+
    "\1\31\1\32\1\33\1\34\3\5\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\4\2\5\1\43\1\44\1\45"+
    "\1\23\1\11\1\33\1\5\20\47\1\50\36\47\3\51"+
    "\62\0\1\52\2\5\1\52\10\5\1\0\3\52\2\0"+
    "\1\53\2\0\1\52\21\5\1\0\1\52\3\5\2\52"+
    "\1\0\3\5\1\52\1\5\1\6\1\52\1\54\1\55"+
    "\1\6\1\5\1\54\2\6\1\5\1\0\3\52\2\0"+
    "\1\53\2\0\1\52\2\5\1\54\2\5\3\54\11\5"+
    "\1\0\1\52\3\5\2\52\1\0\1\55\1\54\1\5"+
    "\2\0\1\56\1\0\1\56\1\0\1\56\1\0\3\56"+
    "\15\0\1\56\2\0\3\56\22\0\1\56\1\0\1\52"+
    "\1\5\1\54\1\52\1\54\1\55\1\54\1\5\3\54"+
    "\1\5\1\0\3\52\2\0\1\53\2\0\1\52\1\5"+
    "\1\57\1\54\2\5\1\60\1\54\1\61\11\5\1\0"+
    "\1\52\3\5\2\52\1\0\1\55\1\61\1\5\1\52"+
    "\2\5\1\52\1\62\7\5\1\0\3\52\2\0\1\53"+
    "\2\0\1\52\3\5\1\63\15\5\1\0\1\52\3\5"+
    "\2\52\1\0\3\5\1\52\1\5\1\6\1\52\1\54"+
    "\1\55\1\15\1\64\1\65\1\15\1\16\1\55\1\0"+
    "\3\52\2\0\1\53\2\0\1\52\2\5\1\54\2\5"+
    "\3\54\11\5\1\0\1\52\3\5\2\52\1\0\1\55"+
    "\1\54\1\5\1\52\2\5\1\52\10\5\1\0\3\52"+
    "\2\0\1\53\2\0\1\52\20\5\1\66\1\0\1\52"+
    "\3\5\2\52\1\0\3\5\1\52\1\5\1\54\1\52"+
    "\1\54\1\55\1\54\1\5\3\54\1\5\1\0\3\52"+
    "\2\0\1\53\2\0\1\52\1\67\1\5\1\33\2\5"+
    "\3\54\11\5\1\0\1\52\3\5\2\52\1\0\1\55"+
    "\1\54\1\5\1\52\1\5\1\6\1\52\1\54\1\55"+
    "\1\15\1\5\1\70\1\15\1\16\1\55\1\0\3\52"+
    "\2\0\1\53\2\0\1\52\2\5\1\54\2\5\3\54"+
    "\11\5\1\0\1\52\3\5\2\52\1\0\1\55\1\54"+
    "\1\5\1\52\1\5\1\6\1\52\1\54\1\55\1\16"+
    "\1\5\1\54\2\16\1\55\1\0\3\52\2\0\1\53"+
    "\2\0\1\52\2\5\1\54\2\5\3\54\11\5\1\0"+
    "\1\52\3\5\2\52\1\0\1\55\1\54\1\5\15\17"+
    "\1\71\44\17\16\20\1\72\43\20\21\0\1\23\34\0"+
    "\1\23\3\0\1\52\2\5\1\52\3\5\1\73\4\5"+
    "\1\0\3\52\2\0\1\53\2\0\1\52\1\5\1\74"+
    "\15\5\1\75\1\5\1\0\1\52\1\5\1\73\1\5"+
    "\2\52\1\0\3\5\1\52\2\5\1\52\10\5\1\0"+
    "\3\52\2\0\1\53\2\0\1\52\2\5\1\36\3\5"+
    "\1\76\6\5\1\36\2\5\1\77\1\0\1\52\3\5"+
    "\2\52\1\0\3\5\1\52\1\5\1\54\1\52\1\100"+
    "\1\55\1\54\1\5\3\54\1\5\1\0\3\52\2\0"+
    "\1\53\2\0\1\52\2\5\1\101\2\5\3\54\4\5"+
    "\1\102\4\5\1\0\1\52\3\5\2\52\1\0\1\55"+
    "\1\54\1\5\1\52\2\5\1\52\10\5\1\0\3\52"+
    "\2\0\1\53\2\0\1\52\5\5\1\103\13\5\1\0"+
    "\1\52\3\5\2\52\1\0\3\5\1\52\1\5\1\54"+
    "\1\52\1\104\1\55\1\54\1\5\1\105\2\54\1\5"+
    "\1\0\3\52\2\0\1\53\2\0\1\52\1\36\1\5"+
    "\1\54\2\5\1\105\1\106\1\54\2\5\1\107\6\5"+
    "\1\0\1\52\2\5\1\110\2\52\1\0\1\55\1\54"+
    "\1\107\1\52\1\5\1\54\1\52\1\54\1\55\1\54"+
    "\1\111\3\54\1\5\1\0\3\52\2\0\1\53\2\0"+
    "\1\52\1\36\1\5\1\112\2\5\3\54\11\5\1\0"+
    "\1\52\1\113\2\5\2\52\1\0\1\55\1\54\1\5"+
    "\1\52\1\5\1\54\1\52\1\54\1\55\1\54\1\5"+
    "\3\54\1\5\1\0\3\52\2\0\1\53\2\0\1\52"+
    "\2\5\1\54\2\5\3\54\11\5\1\0\1\52\3\5"+
    "\2\52\1\0\1\55\1\54\1\5\1\52\2\5\1\52"+
    "\1\114\7\5\1\0\3\52\2\0\1\53\2\0\1\52"+
    "\2\5\1\115\1\116\1\117\1\120\1\67\5\5\1\63"+
    "\1\5\1\116\2\5\1\0\1\52\3\5\2\52\1\0"+
    "\3\5\1\52\2\5\1\52\10\5\1\0\3\52\2\0"+
    "\1\53\2\0\1\52\4\5\1\121\1\5\1\36\7\5"+
    "\1\122\1\5\1\123\1\0\1\52\3\5\2\52\1\0"+
    "\3\5\1\52\2\5\1\52\10\5\1\0\3\52\2\0"+
    "\1\53\2\0\1\52\3\5\1\124\2\5\1\125\1\5"+
    "\1\67\5\5\1\126\2\5\1\0\1\52\3\5\2\52"+
    "\1\0\3\5\1\52\2\5\1\52\10\5\1\0\3\52"+
    "\2\0\1\53\2\0\1\52\6\5\1\127\12\5\1\0"+
    "\1\52\3\5\2\52\1\0\3\5\1\52\2\5\1\52"+
    "\10\5\1\0\3\52\2\0\1\53\2\0\1\52\4\5"+
    "\1\130\6\5\1\131\2\5\1\36\2\5\1\0\1\52"+
    "\3\5\2\52\1\0\3\5\1\0\2\132\1\0\10\132"+
    "\12\0\1\133\4\132\1\134\1\135\1\132\1\136\3\132"+
    "\1\137\1\132\1\140\1\141\1\132\2\0\3\132\3\0"+
    "\3\132\1\52\2\5\1\52\10\5\1\0\3\52\2\0"+
    "\1\53\2\0\1\52\14\5\1\36\1\5\1\36\2\5"+
    "\1\0\1\52\3\5\2\52\1\0\3\5\1\0\1\142"+
    "\2\0\2\142\1\0\2\142\2\0\1\142\12\0\21\142"+
    "\2\0\3\142\3\0\3\142\15\143\1\144\40\143\1\0"+
    "\3\143\1\0\1\145\2\0\2\145\1\0\2\145\2\0"+
    "\1\145\12\0\21\145\2\0\3\145\3\0\3\145\20\47"+
    "\1\0\36\47\3\0\14\52\1\0\3\52\2\0\1\52"+
    "\2\0\22\52\1\0\6\52\1\0\4\52\2\5\1\52"+
    "\10\5\1\0\3\52\2\0\1\53\2\0\1\52\5\5"+
    "\1\36\13\5\1\0\1\52\3\5\2\52\1\0\3\5"+
    "\1\52\1\5\1\54\1\52\1\54\1\55\1\54\1\5"+
    "\3\54\1\5\1\0\3\52\2\0\1\53\2\0\1\52"+
    "\2\5\1\146\2\5\1\146\2\54\11\5\1\0\1\52"+
    "\3\5\2\52\1\0\1\55\1\54\1\5\1\52\1\5"+
    "\1\54\1\52\1\54\1\55\1\54\1\5\3\54\1\5"+
    "\1\0\1\52\1\147\1\52\2\0\1\53\2\0\1\52"+
    "\2\5\1\54\2\5\3\54\11\5\1\0\1\52\3\5"+
    "\2\52\1\0\1\55\1\54\1\5\1\52\2\5\1\52"+
    "\10\5\1\0\3\52\2\0\1\53\2\0\1\52\3\5"+
    "\1\67\15\5\1\0\1\52\3\5\2\52\1\0\3\5"+
    "\1\52\1\5\1\150\1\52\1\150\1\5\1\150\1\5"+
    "\3\150\1\5\1\0\3\52\2\0\1\53\2\0\1\52"+
    "\2\5\1\150\2\5\3\150\11\5\1\0\1\52\3\5"+
    "\2\52\1\0\1\5\1\150\1\5\1\52\1\5\1\54"+
    "\1\52\1\54\1\55\1\65\1\5\1\54\1\65\1\54"+
    "\1\5\1\0\3\52\2\0\1\53\2\0\1\52\2\5"+
    "\1\54\2\5\3\54\11\5\1\0\1\52\3\5\2\52"+
    "\1\0\1\55\1\54\1\5\1\52\2\5\1\52\10\5"+
    "\1\0\3\52\2\0\1\53\2\0\1\52\16\5\1\36"+
    "\2\5\1\0\1\52\3\5\2\52\1\0\3\5\1\52"+
    "\2\5\1\52\10\5\1\0\3\52\2\0\1\53\2\0"+
    "\1\52\13\5\1\36\5\5\1\0\1\52\3\5\2\52"+
    "\1\0\3\5\1\52\2\5\1\52\1\5\1\63\6\5"+
    "\1\0\3\52\2\0\1\53\2\0\1\52\3\5\1\63"+
    "\15\5\1\0\1\52\3\5\2\52\1\0\1\63\2\5"+
    "\1\52\2\5\1\52\10\5\1\0\3\52\2\0\1\53"+
    "\2\0\1\52\1\151\1\5\1\152\2\5\1\151\13\5"+
    "\1\0\1\52\3\5\2\52\1\0\3\5\1\52\2\5"+
    "\1\52\1\153\6\5\1\107\1\0\3\52\2\0\1\53"+
    "\2\0\1\52\21\5\1\0\1\52\3\5\2\52\1\0"+
    "\3\5\1\52\2\5\1\52\7\5\1\36\1\0\3\52"+
    "\2\0\1\53\2\0\1\52\21\5\1\0\1\52\3\5"+
    "\2\52\1\0\3\5\1\52\2\5\1\52\10\5\1\0"+
    "\3\52\2\0\1\53\2\0\1\52\14\5\1\36\4\5"+
    "\1\0\1\52\3\5\2\52\1\0\3\5\1\52\1\5"+
    "\1\54\1\52\1\54\1\55\1\54\1\5\3\54\1\5"+
    "\1\0\3\52\2\0\1\53\2\0\1\52\2\5\1\54"+
    "\1\154\1\5\3\54\11\5\1\0\1\52\3\5\2\52"+
    "\1\0\1\55\1\54\1\5\1\52\1\5\1\54\1\52"+
    "\1\54\1\55\1\54\1\5\3\54\1\5\1\0\3\52"+
    "\2\0\1\53\2\0\1\52\2\5\1\54\2\5\2\54"+
    "\1\146\11\5\1\0\1\52\3\5\2\52\1\0\1\55"+
    "\1\146\1\5\1\52\2\5\1\52\10\5\1\0\3\52"+
    "\2\0\1\53\2\0\1\52\1\151\2\5\1\36\1\5"+
    "\1\151\13\5\1\0\1\52\3\5\2\52\1\0\3\5"+
    "\1\52\2\5\1\52\10\5\1\0\3\52\2\0\1\53"+
    "\2\0\1\52\1\151\4\5\1\151\13\5\1\0\1\52"+
    "\3\5\2\52\1\0\3\5\1\52\1\5\1\54\1\52"+
    "\1\146\1\55\1\54\1\5\3\54\1\5\1\0\3\52"+
    "\2\0\1\53\2\0\1\52\2\5\1\54\2\5\3\54"+
    "\11\5\1\0\1\52\3\5\2\52\1\0\1\55\1\54"+
    "\1\5\1\52\1\5\1\54\1\52\1\54\1\55\1\54"+
    "\1\5\3\54\1\5\1\0\3\52\2\0\1\53\2\0"+
    "\1\52\2\5\1\146\2\5\2\54\1\155\11\5\1\0"+
    "\1\52\3\5\2\52\1\0\1\55\1\155\1\5\1\52"+
    "\2\5\1\52\10\5\1\0\3\52\2\0\1\53\2\0"+
    "\1\52\1\5\1\156\17\5\1\0\1\52\3\5\2\52"+
    "\1\0\3\5\1\52\2\5\1\52\3\5\1\36\4\5"+
    "\1\0\3\52\2\0\1\53\2\0\1\52\21\5\1\0"+
    "\1\52\3\5\2\52\1\0\3\5\1\52\1\5\1\54"+
    "\1\52\1\54\1\157\1\54\1\5\3\54\1\5\1\0"+
    "\3\52\2\0\1\53\2\0\1\52\2\5\1\54\2\5"+
    "\3\54\11\5\1\0\1\52\3\5\2\52\1\0\1\157"+
    "\1\54\1\5\1\52\2\5\1\52\10\5\1\0\3\52"+
    "\2\0\1\53\2\0\1\52\4\5\1\107\14\5\1\0"+
    "\1\52\3\5\2\52\1\0\3\5\1\52\2\5\1\52"+
    "\10\5\1\0\3\52\2\0\1\53\2\0\1\52\11\5"+
    "\1\160\7\5\1\0\1\52\3\5\2\52\1\0\3\5"+
    "\1\52\2\5\1\52\10\5\1\0\3\52\2\0\1\53"+
    "\2\0\1\52\7\5\1\36\11\5\1\0\1\52\3\5"+
    "\2\52\1\0\1\5\1\36\1\5\1\52\2\5\1\52"+
    "\1\36\7\5\1\0\3\52\2\0\1\53\2\0\1\52"+
    "\3\5\1\36\15\5\1\0\1\52\3\5\2\52\1\0"+
    "\3\5\1\52\2\5\1\52\4\5\1\36\3\5\1\0"+
    "\3\52\2\0\1\53\2\0\1\52\21\5\1\0\1\52"+
    "\3\5\2\52\1\0\3\5\1\52\2\5\1\52\10\5"+
    "\1\0\3\52\2\0\1\53\2\0\1\52\2\5\1\36"+
    "\16\5\1\0\1\52\3\5\2\52\1\0\3\5\1\52"+
    "\2\5\1\52\10\5\1\0\3\52\2\0\1\53\2\0"+
    "\1\52\10\5\1\161\10\5\1\0\1\52\3\5\2\52"+
    "\1\0\3\5\1\52\2\5\1\52\10\5\1\0\3\52"+
    "\2\0\1\53\2\0\1\52\1\162\20\5\1\0\1\52"+
    "\3\5\2\52\1\0\3\5\1\52\2\5\1\52\1\36"+
    "\7\5\1\0\3\52\2\0\1\53\2\0\1\52\2\5"+
    "\1\163\16\5\1\0\1\52\3\5\2\52\1\0\3\5"+
    "\1\52\2\5\1\52\10\5\1\0\3\52\2\0\1\53"+
    "\2\0\1\52\10\5\1\164\2\5\1\165\5\5\1\0"+
    "\1\52\3\5\2\52\1\0\3\5\1\52\2\5\1\52"+
    "\1\36\7\5\1\0\3\52\2\0\1\53\2\0\1\52"+
    "\2\5\1\163\2\5\1\36\13\5\1\0\1\52\3\5"+
    "\2\52\1\0\3\5\1\52\2\5\1\52\10\5\1\0"+
    "\3\52\2\0\1\53\2\0\1\52\10\5\1\166\10\5"+
    "\1\0\1\52\3\5\2\52\1\0\3\5\1\52\2\5"+
    "\1\52\10\5\1\0\3\52\2\0\1\53\2\0\1\52"+
    "\13\5\1\167\5\5\1\0\1\52\3\5\2\52\1\0"+
    "\3\5\1\52\2\5\1\52\10\5\1\0\3\52\2\0"+
    "\1\53\2\0\1\52\1\66\4\5\1\66\13\5\1\0"+
    "\1\52\3\5\2\52\1\0\3\5\14\170\1\0\3\170"+
    "\2\0\1\170\2\0\22\170\1\0\6\170\1\0\17\170"+
    "\1\0\3\170\2\0\1\170\2\0\2\170\1\171\15\170"+
    "\1\172\1\170\1\0\6\170\1\0\13\170\1\173\3\170"+
    "\1\0\3\170\2\0\1\170\2\0\6\170\1\173\1\174"+
    "\3\170\1\173\6\170\1\0\6\170\1\0\2\170\1\173"+
    "\14\170\1\0\3\170\2\0\1\170\2\0\3\170\1\175"+
    "\16\170\1\0\1\170\1\176\4\170\1\0\7\170\1\177"+
    "\7\170\1\0\3\170\2\0\1\170\2\0\22\170\1\0"+
    "\6\170\1\0\17\170\1\0\3\170\2\0\1\170\2\0"+
    "\17\170\1\200\2\170\1\0\6\170\1\0\17\170\1\0"+
    "\3\170\2\0\1\170\2\0\7\170\1\201\12\170\1\0"+
    "\6\170\1\0\17\170\1\0\3\170\2\0\1\170\2\0"+
    "\7\170\1\202\12\170\1\0\6\170\1\0\3\170\56\143"+
    "\1\0\3\143\15\144\1\143\40\144\1\203\3\144\1\0"+
    "\2\145\1\0\10\145\12\0\21\145\2\0\3\145\3\0"+
    "\3\145\1\52\2\5\1\52\10\5\1\0\3\52\2\0"+
    "\1\53\2\0\1\52\3\5\1\204\15\5\1\0\1\52"+
    "\3\5\2\52\1\0\3\5\1\52\2\5\1\52\7\5"+
    "\1\205\1\0\3\52\2\0\1\53\2\0\1\52\21\5"+
    "\1\0\1\52\3\5\2\52\1\0\3\5\1\52\2\5"+
    "\1\52\10\5\1\0\3\52\2\0\1\53\2\0\1\52"+
    "\3\5\1\36\15\5\1\0\1\52\3\5\2\52\1\0"+
    "\3\5\1\52\1\5\1\54\1\52\1\54\1\55\1\54"+
    "\1\5\1\105\2\54\1\5\1\0\3\52\2\0\1\53"+
    "\2\0\1\52\1\206\1\5\1\54\2\5\1\207\2\54"+
    "\2\5\1\107\3\5\1\210\2\5\1\0\1\52\3\5"+
    "\2\52\1\0\1\55\1\54\1\107\1\52\2\5\1\52"+
    "\10\5\1\0\3\52\2\0\1\53\2\0\1\52\15\5"+
    "\1\36\3\5\1\0\1\52\3\5\2\52\1\0\3\5"+
    "\1\52\2\5\1\52\10\5\1\0\3\52\2\0\1\53"+
    "\2\0\1\52\20\5\1\211\1\0\1\52\3\5\2\52"+
    "\1\0\3\5\1\52\2\5\1\52\10\5\1\0\3\52"+
    "\2\0\1\53\2\0\1\52\6\5\1\212\12\5\1\0"+
    "\1\52\3\5\2\52\1\0\3\5\1\52\2\5\1\52"+
    "\1\5\1\36\6\5\1\0\3\52\2\0\1\53\2\0"+
    "\1\52\21\5\1\0\1\52\3\5\2\52\1\0\1\36"+
    "\2\5\1\52\2\5\1\52\10\5\1\0\3\52\2\0"+
    "\1\53\2\0\1\52\1\5\1\213\17\5\1\0\1\52"+
    "\3\5\2\52\1\0\3\5\1\52\2\5\1\52\1\36"+
    "\7\5\1\0\3\52\2\0\1\53\2\0\1\52\21\5"+
    "\1\0\1\52\3\5\2\52\1\0\3\5\1\52\2\5"+
    "\1\52\10\5\1\0\3\52\2\0\1\53\2\0\1\52"+
    "\20\5\1\214\1\0\1\52\3\5\2\52\1\0\3\5"+
    "\1\52\2\5\1\52\10\5\1\0\3\52\2\0\1\53"+
    "\2\0\1\52\2\36\17\5\1\0\1\52\3\5\2\52"+
    "\1\0\3\5\1\52\2\5\1\52\10\5\1\0\3\52"+
    "\2\0\1\53\2\0\1\52\10\5\1\215\10\5\1\0"+
    "\1\52\3\5\2\52\1\0\3\5\1\52\2\5\1\52"+
    "\10\5\1\0\3\52\2\0\1\53\2\0\1\52\1\36"+
    "\4\5\1\36\13\5\1\0\1\52\3\5\2\52\1\0"+
    "\3\5\14\170\1\0\3\170\2\0\1\170\2\0\3\170"+
    "\1\216\16\170\1\0\6\170\1\0\7\170\1\217\6\170"+
    "\1\173\1\0\3\170\2\0\1\170\2\0\22\170\1\0"+
    "\6\170\1\0\17\170\1\0\3\170\2\0\1\170\2\0"+
    "\10\170\1\220\11\170\1\0\6\170\1\0\1\170\1\220"+
    "\6\170\1\221\6\170\1\0\3\170\2\0\1\170\2\0"+
    "\22\170\1\0\6\170\1\0\1\221\16\170\1\0\3\170"+
    "\2\0\1\170\2\0\5\170\1\173\14\170\1\0\6\170"+
    "\1\0\17\170\1\0\3\170\2\0\1\170\2\0\12\170"+
    "\1\222\7\170\1\0\6\170\1\0\17\170\1\0\3\170"+
    "\2\0\1\170\2\0\1\170\1\223\20\170\1\0\6\170"+
    "\1\0\17\170\1\0\3\170\2\0\1\170\2\0\11\170"+
    "\1\224\10\170\1\0\6\170\1\0\17\170\1\0\3\170"+
    "\2\0\1\170\2\0\11\170\1\225\10\170\1\0\6\170"+
    "\1\0\3\170\15\203\1\226\44\203\1\52\2\5\1\52"+
    "\10\5\1\0\3\52\2\0\1\53\2\0\1\52\4\5"+
    "\1\227\14\5\1\0\1\52\3\5\2\52\1\0\3\5"+
    "\1\52\2\5\1\52\10\5\1\0\3\52\2\0\1\53"+
    "\2\0\1\52\6\5\1\107\12\5\1\0\1\52\3\5"+
    "\2\52\1\0\3\5\1\52\2\5\1\52\10\5\1\0"+
    "\3\52\2\0\1\53\2\0\1\52\1\5\1\230\17\5"+
    "\1\0\1\52\3\5\2\52\1\0\3\5\1\52\1\5"+
    "\1\54\1\52\1\54\1\55\1\54\1\5\3\54\1\5"+
    "\1\0\3\52\2\0\1\53\2\0\1\52\2\5\1\54"+
    "\2\5\3\54\2\5\1\107\6\5\1\0\1\52\3\5"+
    "\2\52\1\0\1\55\1\54\1\107\1\52\2\5\1\52"+
    "\10\5\1\0\3\52\2\0\1\53\2\0\1\52\6\5"+
    "\1\231\12\5\1\0\1\52\3\5\2\52\1\0\3\5"+
    "\1\52\2\5\1\52\10\5\1\0\3\52\2\0\1\53"+
    "\2\0\1\52\12\5\1\232\1\233\5\5\1\0\1\52"+
    "\3\5\2\52\1\0\2\5\1\232\1\52\2\5\1\52"+
    "\10\5\1\0\3\52\2\0\1\53\2\0\1\52\13\5"+
    "\1\234\5\5\1\0\1\52\3\5\2\52\1\0\3\5"+
    "\1\52\2\5\1\52\10\5\1\0\3\52\2\0\1\53"+
    "\2\0\1\52\4\5\1\235\14\5\1\0\1\52\3\5"+
    "\2\52\1\0\3\5\1\52\2\5\1\52\1\236\7\5"+
    "\1\0\3\52\2\0\1\53\2\0\1\52\21\5\1\0"+
    "\1\52\3\5\2\52\1\0\3\5\14\170\1\0\3\170"+
    "\2\0\1\170\2\0\4\170\1\237\15\170\1\0\6\170"+
    "\1\0\16\170\1\240\1\0\3\170\2\0\1\170\2\0"+
    "\22\170\1\0\6\170\1\0\13\170\1\173\3\170\1\0"+
    "\3\170\2\0\1\170\2\0\1\170\1\241\4\170\1\242"+
    "\4\170\1\173\3\170\1\243\2\170\1\0\6\170\1\0"+
    "\2\170\1\173\14\170\1\0\3\170\2\0\1\170\2\0"+
    "\21\170\1\244\1\0\6\170\1\0\17\170\1\0\3\170"+
    "\2\0\1\170\2\0\7\170\1\245\12\170\1\0\6\170"+
    "\1\0\17\170\1\0\3\170\2\0\1\170\2\0\2\170"+
    "\1\246\17\170\1\0\6\170\1\0\17\170\1\0\3\170"+
    "\2\0\1\170\2\0\21\170\1\247\1\0\6\170\1\0"+
    "\17\170\1\0\3\170\2\0\1\170\2\0\11\170\1\250"+
    "\10\170\1\0\6\170\1\0\3\170\1\52\2\5\1\52"+
    "\10\5\1\0\3\52\2\0\1\53\2\0\1\52\5\5"+
    "\1\230\13\5\1\0\1\52\3\5\2\52\1\0\3\5"+
    "\1\52\2\5\1\52\10\5\1\0\3\52\2\0\1\53"+
    "\2\0\1\52\6\5\1\211\12\5\1\0\1\52\3\5"+
    "\2\52\1\0\3\5\1\52\2\5\1\52\10\5\1\0"+
    "\3\52\2\0\1\53\2\0\1\52\10\5\1\107\10\5"+
    "\1\0\1\52\3\5\2\52\1\0\3\5\1\52\2\5"+
    "\1\52\1\251\7\5\1\0\3\52\2\0\1\53\2\0"+
    "\1\52\21\5\1\0\1\52\3\5\2\52\1\0\3\5"+
    "\1\52\2\5\1\52\1\252\7\5\1\0\3\52\2\0"+
    "\1\53\2\0\1\52\15\5\1\253\3\5\1\0\1\52"+
    "\3\5\2\52\1\0\3\5\1\52\2\5\1\52\10\5"+
    "\1\0\3\52\2\0\1\53\2\0\1\52\3\5\1\254"+
    "\15\5\1\0\1\52\3\5\2\52\1\0\3\5\1\52"+
    "\2\5\1\52\10\5\1\0\3\52\2\0\1\53\2\0"+
    "\1\52\16\5\1\255\2\5\1\0\1\52\3\5\2\52"+
    "\1\0\3\5\1\52\2\5\1\52\7\5\1\230\1\0"+
    "\3\52\2\0\1\53\2\0\1\52\21\5\1\0\1\52"+
    "\3\5\2\52\1\0\3\5\14\170\1\0\3\170\2\0"+
    "\1\170\2\0\5\170\1\256\14\170\1\0\6\170\1\0"+
    "\17\170\1\0\3\170\2\0\1\170\2\0\7\170\1\173"+
    "\12\170\1\0\6\170\1\0\17\170\1\0\3\170\2\0"+
    "\1\170\2\0\2\170\1\257\17\170\1\0\6\170\1\0"+
    "\17\170\1\0\3\170\2\0\1\170\2\0\13\170\1\173"+
    "\6\170\1\0\6\170\1\0\2\170\1\173\14\170\1\0"+
    "\3\170\2\0\1\170\2\0\7\170\1\260\12\170\1\0"+
    "\6\170\1\0\17\170\1\0\3\170\2\0\1\170\2\0"+
    "\22\170\1\0\1\261\5\170\1\0\17\170\1\0\3\170"+
    "\2\0\1\170\2\0\13\170\1\262\1\263\5\170\1\0"+
    "\6\170\1\0\2\170\1\262\14\170\1\0\3\170\2\0"+
    "\1\170\2\0\14\170\1\264\5\170\1\0\6\170\1\0"+
    "\17\170\1\0\3\170\2\0\1\170\2\0\5\170\1\265"+
    "\14\170\1\0\6\170\1\0\7\170\1\266\7\170\1\0"+
    "\3\170\2\0\1\170\2\0\22\170\1\0\6\170\1\0"+
    "\3\170\1\52\2\5\1\52\10\5\1\0\3\52\2\0"+
    "\1\53\2\0\1\52\11\5\1\211\7\5\1\0\1\52"+
    "\3\5\2\52\1\0\3\5\1\52\2\5\1\52\10\5"+
    "\1\0\3\52\2\0\1\53\2\0\1\52\14\5\1\211"+
    "\4\5\1\0\1\52\3\5\2\52\1\0\3\5\1\52"+
    "\2\5\1\52\3\5\1\211\4\5\1\0\3\52\2\0"+
    "\1\53\2\0\1\52\21\5\1\0\1\52\3\5\2\52"+
    "\1\0\3\5\1\52\2\5\1\52\10\5\1\0\3\52"+
    "\2\0\1\53\2\0\1\52\1\5\1\211\17\5\1\0"+
    "\1\52\3\5\2\52\1\0\3\5\1\52\2\5\1\52"+
    "\10\5\1\0\3\52\2\0\1\53\2\0\1\52\2\5"+
    "\1\205\16\5\1\0\1\52\3\5\2\52\1\0\3\5"+
    "\14\170\1\0\3\170\2\0\1\170\2\0\6\170\1\257"+
    "\13\170\1\0\6\170\1\0\17\170\1\0\3\170\2\0"+
    "\1\170\2\0\7\170\1\261\12\170\1\0\6\170\1\0"+
    "\17\170\1\0\3\170\2\0\1\170\2\0\11\170\1\173"+
    "\10\170\1\0\6\170\1\0\7\170\1\267\7\170\1\0"+
    "\3\170\2\0\1\170\2\0\22\170\1\0\6\170\1\0"+
    "\7\170\1\270\7\170\1\0\3\170\2\0\1\170\2\0"+
    "\16\170\1\271\3\170\1\0\6\170\1\0\17\170\1\0"+
    "\3\170\2\0\1\170\2\0\4\170\1\272\15\170\1\0"+
    "\6\170\1\0\17\170\1\0\3\170\2\0\1\170\2\0"+
    "\17\170\1\273\2\170\1\0\6\170\1\0\16\170\1\257"+
    "\1\0\3\170\2\0\1\170\2\0\22\170\1\0\6\170"+
    "\1\0\17\170\1\0\3\170\2\0\1\170\2\0\12\170"+
    "\1\261\7\170\1\0\6\170\1\0\17\170\1\0\3\170"+
    "\2\0\1\170\2\0\15\170\1\261\4\170\1\0\6\170"+
    "\1\0\12\170\1\261\4\170\1\0\3\170\2\0\1\170"+
    "\2\0\22\170\1\0\6\170\1\0\17\170\1\0\3\170"+
    "\2\0\1\170\2\0\2\170\1\261\17\170\1\0\6\170"+
    "\1\0\17\170\1\0\3\170\2\0\1\170\2\0\3\170"+
    "\1\240\16\170\1\0\6\170\1\0\3\170";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8000];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\14\1\2\11\1\1\1\11\23\1\2\11"+
    "\17\1\2\11\37\1\10\0\64\1\1\11\45\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[187];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  We must have this here as JFLex does not generate a
	 * no parameter constructor.
	 */
	public AssemblerZ80TokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { ";", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *                    <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = YYINITIAL;
		switch (initialTokenType) {
			default:
				state = YYINITIAL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AssemblerZ80TokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AssemblerZ80TokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }

  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 10: 
          { addToken(Token.RESERVED_WORD);
          }
        case 17: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 18: break;
        case 16: 
          { addToken(Token.FUNCTION);
          }
        case 19: break;
        case 14: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 20: break;
        case 8: 
          { addToken(Token.WHITESPACE);
          }
        case 21: break;
        case 3: 
          { addToken(Token.VARIABLE);
          }
        case 22: break;
        case 13: 
          { addToken(Token.PREPROCESSOR);
          }
        case 23: break;
        case 5: 
          { addToken(Token.ERROR_CHAR); /*addNullToken(); return firstToken;*/
          }
        case 24: break;
        case 6: 
          { start = zzMarkedPos-1; yybegin(EOL_COMMENT);
          }
        case 25: break;
        case 9: 
          { addToken(Token.OPERATOR);
          }
        case 26: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 27: break;
        case 15: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 28: break;
        case 4: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 29: break;
        case 7: 
          { addNullToken(); return firstToken;
          }
        case 30: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 31: break;
        case 11: 
          { 
          }
        case 32: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 188: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 189: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
